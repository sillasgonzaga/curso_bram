count(gender, eye_color, name = "qtd_personages")
hero_info %>%
select(gender, eye_color) %>%
na.omit() %>%
count(gender, eye_color, name = "qtd_personagens")
hero_info %>%
select(gender, eye_color) %>%
na.omit() %>%
count(gender, eye_color, name = "qtd_personagens") %>%
top_n(n = 3, wt = qtd_personagens)
hero_info %>%
select(gender, eye_color) %>%
na.omit() %>%
count(gender, eye_color, name = "qtd_personagens") %>%
group_by(gender) %>%
top_n(n = 3, wt = qtd_personagens)
hero_info %>%
select(gender, eye_color) %>%
na.omit() %>%
count(gender, eye_color, name = "qtd_personagens")
hero_info %>%
select(gender, eye_color) %>%
na.omit() %>%
count(gender, eye_color, name = "qtd_personagens") %>%
slice_max(order_by = qtd_personagens, n = 3)
hero_info %>%
select(gender, eye_color) %>%
na.omit() %>%
count(gender, eye_color, name = "qtd_personagens") %>%
group_by(gender) %>%
slice_max(order_by = qtd_personagens, n = 3)
# 8
hero_powers
mean(hero_powers$agility)
# 8
hero_powers %>%
summarise(mean(agility))
mean(hero_powers$agility)
hero_powers %>%
summarise_if(is.logical, mean)
hero_powers %>%
pivot_longer(cols = -hero_names)
hero_powers %>%
pivot_longer(cols = -hero_names,
names_to = "nome_poder",
values_to = "possui_poder")
hero_powers_long <- hero_powers %>%
pivot_longer(cols = -hero_names,
names_to = "nome_poder",
values_to = "possui_poder")
hero_powers_long
hero_powers_long %>%
group_by(nome_poder) %>%
summarise(pct_tem_poder = mean(possui_poder))
hero_powers_long %>%
group_by(nome_poder) %>%
summarise(pct_tem_poder = mean(possui_poder)) %>%
arrange(pct_tem_poder)
# 10
inner_join(hero_info, hero_powers)
# 10
inner_join(hero_info, hero_powers, by = c("name" = "hero_names"))
# 10
hero <- inner_join(hero_info, hero_powers, by = c("name" = "hero_names"))
glimpse(hero)
hero %>%
select(publisher, telepathy)
# 11
hero %>%
select(publisher, telepathy) %>%
group_by(publisher) %>%
summarise(pct_telepatas = mean(telepathy))
# 12
hero %>%
select(name, publisher, flight, weight)
# 12
hero %>%
select(name, publisher, flight, weight) %>%
filter(flight)
# 12
hero %>%
select(name, publisher, flight, weight) %>%
filter(flight) %>%
top_n(n = 10, wt = weight)
# 12
hero %>%
select(name, publisher, flight, weight) %>%
filter(flight) %>%
#top_n(n = 10, wt = weight)
slice_max(order_by = weight, n = 10)
# 13
readr::write_csv(hero, "herois_completo.csv")
library(stringr)
a <- 'texto 1'
b <- 'texto 2'
c <- 'texto 3'
a
b
c
paste(a, b, c)
d = paste(a, b, c)
d
?paste
d <-  paste(a, b, c, sep = "@")
?paste
d
nomes <- c("Fulano", "Ciclano", "Beltrano")
nomes <- c("Fulano", "Ciclano", "Beltrano")
sobrenomes <- c("Silva", "Oliveira", "Moreira")
paste(nomes, sobrenomes, sep = "_")
cnae.texto <- c('10 Fabricação de produtos alimentícios', '11 Fabricação de bebidas',
'12 Fabricação de produtos do fumo', '13 Fabricação de produtos têxteis',
'14 Confecção de artigos do vestuário e acessórios',
'15 Preparação de couros e fabricação de artefatos de couro, artigos para viagem e calçados',
'16 Fabricação de produtos de madeira',
'17 Fabricação de celulose, papel e produtos de papel')
str_sub(cnae.texto, start = 1, end = 2)
# extraindo as descrições
str_sub(cnae.texto, start = 4, 20)
# extraindo as descrições
str_sub(cnae.texto, start = 4, 1000)
?str_sub
# extraindo as descrições
str_sub(cnae.texto, start = 4, -1)
# extraindo as descrições
str_sub(cnae.texto, start = 4, -2)
# extraindo as descrições
str_sub(cnae.texto, start = 4, -1)
telefone <- "11 3232 6055"
str_sub(telefone, -4, -1)
str_sub(telefone, -4)
telefones <- c('9931-9572', '8591-5772', '8562-1923')
telefones <- c('9931-9572', '11-8591-5772', '8562-1923')
str_replace(telefones, "-", " ")
str_replace(telefones, "-", "")
str_replace(telefones, "-", " ")
str_replace_all(telefones, "-", " ")
cnpj <- c('19.702.231/9999-98', '19.498.482/9999-05', '19.499.583/9999-50', '19.500.999/9999-46', '19.501.139/9999-90')
cnpj
parse_number(cpnj)
cnpj
cnpj <- c('19.702.231/9999-98', '19.498.482/9999-05', '19.499.583/9999-50', '19.500.999/9999-46', '19.501.139/9999-90')
parse_number(cnpj)
telefones
str_replace_all(telefones, "-", "")
str_remove_all(telefones, "-")
str_remove_all(cnpj, ".")
?str_remove_all
str_remove_all(cnpj, ".")
str_remove_all(cnpj, "-")
str_remove_all(cnpj, "\\.")
str_remove_all(cnpj, "/")
nome <- c("Fulano")
nome <- c("Fulano")
"Oi eu sou o Fulano, prazer"
nome <- c("Fulano")
paste("Oi eu sou o ", nome, ", prazer")
paste("Oi eu sou o ", nome, ", prazer")
paste("Oi eu sou o ", nome, ", prazer", sep = "")
str_glue("Oi eu sou o {nome}, prazer")
nome <- c("Fulano", "Ciclano")
str_glue("Oi eu sou o {nome}, prazer")
str_glue("Oi eu {sou} o {nome}, prazer")
library(stringr)
vetor_nomes <- c("Alana", "Alberto", "Fulano")
str_replace(vetor_nomes, "a", "@")
"A" == "a"
str_replace_all(vetor_nomes, "a", "@")
# subsituir tanto a como A por @
str_replace_all(tolower(vetor_nomes), "a", "@")
# via regex
str_replace(vetor_nomes, ".", "#")
vetor_nomes <- c("Alana", "Alberto", "Fulano.Silva")
# via regex
str_replace(vetor_nomes, ".", "#")
# via regex
str_replace(vetor_nomes, "\\.", "#")
# via regex
#str_replace(vetor_nomes, "\\.", "#")
str_replace(vetor_nomes, "a|A", "@")
# via regex
#str_replace(vetor_nomes, "\\.", "#")
str_replace_all(vetor_nomes, "a|A", "@")
# via regex
#str_replace(vetor_nomes, "\\.", "#")
str_replace_all(vetor_nomes, "a|A|o", "@")
vetor_nomes <- c("Alana", "Alberto", "Fulano.Silva", "Fred")
# usando str_replace_all() para detectar se um string contem um substring
vetor_nomes
# usando str_replace_all() para detectar se um string contem um substring
str_replace_all(vetor_nomes, "a", "")
# usando str_replace_all() para detectar se um string contem um substring
str_replace_all(vetor_nomes, "a", "") == vetor_nomes
str_count(vetor_nomes, "a")
str_count(vetor_nomes, "a|A")
str_count(vetor_nomes, "a|A") > 0
str_detect(vetor_nomes, "a|A")
cpfs <- c(1234, 01833827570, 45614814570, 4, 4000001111)
CPFS
cpfs
as.character(cpfs)
str_length(cpfs)
length(cpfs)
?str_pad
str_pad(cpfs, width = 11, pad = "0", side = "left")
str_pad(cpfs, width = 11, pad = "0", side = "right")
cpfs <- c(1234, 01833827570, 45614814570, 4, 4000001111, 123456789123)
str_length(cpfs)
str_pad(cpfs, width = 11, pad = "0", side = "left")
vetor_cpfs_arrumado = str_pad(cpfs, width = 11, pad = "0", side = "left")
str_length(vetor_cpfs_arrumado)
cpfs <- c(1234, 01833827570, 45614814570, 4, 4000001111, 123456789123)
cpfs
str_sub(cpfs, start = -12)
str_sub(cpfs, start = -11)
arrumar_cpfs <- function(x, contar_do_inicio = TRUE){
if (contar_do_inicio){
ifelse(
# teste logico
str_length(x) <= 11,
# se TRUE
str_pad(x, width = 11, pad = "0", side = "left"),
# se FALSE
str_sub(x, 1 , 11)
)
} else{
ifelse(
# teste logico
str_length(x) <= 11,
# se TRUE
str_pad(x, width = 11, pad = "0", side = "left"),
# se FALSE
str_sub(x, start = -11)
)
}
}
cpfs
arrumar_cpfs(cpfs, contar_do_inicio = TRU)
arrumar_cpfs(cpfs, contar_do_inicio = TRUE)
cpfs <- c(1234, 01833827570, 45614814570, 4, 4000001111, 12345678912345)
cpfs
arrumar_cpfs(cpfs, contar_do_inicio = TRUE)
cpfs
# Como remover notaçao cientifica
options(scipen = 999)
cpfs
arrumar_cpfs(cpfs, contar_do_inicio = TRUE)
arrumar_cpfs(cpfs, contar_do_inicio = FALSE)
str_pad(cpfs, 11, side = 'both', pad = "#")
x <- c("      inicio",
"final      ",
"      ambos      ",
"    no       meio        ")
x
str_trim(x)
x <- c("      inicio",
"final      ",
"      inicio e final      ",
"    no       meio       de         2020 ")
x
str_trim(x)
str_squish(x)
str_count(vetor_nomes, "a|A")
vetor_nomes
textos <- c("Fulano", "fulano", "abcdeF", "01584",
"abc456", "123def", "OI", "meuemail@gmail.com",
"www.google.com", "Meu nome é Fulano")
textos
str_replace_all(textos, "F", "#")
str_detect(textos, "F")
# começa com F
str_detect(textos, "^F")
str_replace_all(textos, "^F", "#")
str_detect(textos, regex("^F", ignore_case = TRUE))
?regex
?regex
regex("^F", ignore_case = TRUE)
textos
textos %>% tolower()
textos %>% tolower() %>% str_detect("^f")
# termina com "o"
str_detect(textos, "o")
str_detect(textos, "o$")
str_subset(textos, "o$")
str_subset(textos, "o")
# contem algarismo
str_subset(textos, "\\d")
str_subset(textos, "[0-9]")
minha_data <- "2020-05-11"
# YYYY-MM-DD
minha_data <- "2020-05-11"
class(minha_data)
minha_data + 7
# YYYY-MM-DD
minha_data <- "2020-11-05"
class(minha_data)
minha_data + 7
minha_data <- as.Date("2020-11-05")
minha_data
class(minha_data)
minha_data + 7
library(bizdays)
install.packages("bizdays")
library(bizdays)
?add.bizdays()
# criar um objeto de calendario
?Calendar
# criar um objeto de calendario
(cal <- Calendar(holidaysANBIMA, weekdays=c('saturday', 'sunday'), name='ANBIMA'))
# criar um objeto de calendario
library("ctv")
# criar um objeto de calendario
install.packages("ctv")
library("ctv")
(cal <- Calendar(holidaysANBIMA, weekdays=c('saturday', 'sunday'), name='ANBIMA'))
holidaysANBIMA
#(cal <- Calendar(holidaysANBIMA, weekdays=c('saturday', 'sunday'), name='ANBIMA'))
?create.calendar
calendario <- create.calendar(name = "Brasil",
holidays = holidaysANBIMA,
weekdays = c("saturday", "sunday"))
calendario
minha_data + 7 # dias corridos
add.bizdays(minha_data, 7, calendario)
ISOdate(2020, 11, 5)
x <- c("2014-07-15", "2018/03/20", "2019-12-31", "20170511")
x <- c("2014-07-15", "2018/03/20", "2019-12-31", "20170511")
as.Date(x)
library(lubridate)
as_date(x)
class(as_date(x))
library(tidyverse)
library(lubridate)
?seq.Date
seq.Date(from = as.Date("2020-01-01"),
by = "1 month",
length.out = 12)
seq.Date(to = as.Date("2020-12-01"),
by = "1 month",
length.out = 12)
seq.Date(from = as.Date("1996-02-01"),
to = as.Date("1996-03-01") - 1,
by = "1 day")
datas_brasil <- c("01/12/2019", "20/11/2018", "30011990", "17-03-2000")
datas_brasil
class(datas_brasil)
?mdy
?mdy()
today()
dmy(datas_brasil)
library(lubridate)
today()
now()
now()
class(now())
"05-11-2020 21:07:03"
dmy("05-11-2020 21:07:03")
dmy_hms("05-11-2020 21:07:03")
datas_brasil <- c("01/12/2019", "20/11/2018", "30011990", "17-03-2000")
datas_brasil <- dmy_hms(c("01/12/2019 13:51:15", "20/11/2018 00:00:00", "30011990 080000", "17-03-2000 203000"))
datas_brasil
day(datas_brasil)
month(datas_brasil)
month(datas_brasil, label = TRUE)
month(datas_brasil, label = TRUE, abbr = TRUE)
month(datas_brasil, label = TRUE, abbr = FALSE)
year(datas_brasil)
quarter(datas_brasil)
week(datas_brasil)
wday(datas_brasil
wday(datas_brasil)
wday(datas_brasil)
wday(datas_brasil, label = TRUE)
wday(datas_brasil, label = TRUE, abbr = FALSE)
?wday
mday(datas_brasil)
yday(datas_brasil)
hour(datas_brasil)
minute(datas_brasil)
second(datas_brasil)
datas_brasil
datas_brasil + 7
# readxl::read_excel()
datas_brasil
# readxl::read_excel()
as.Date(datas_brasil)
# readxl::read_excel()
as.Date(datas_brasil) + 7
datas_brasil + ddays(8)
datas_brasil - ddays(8)
?ddays()
datas_brasil + dmonths(3)
datas_brasil
datas_brasil
datas_brasil + dhours(4)
data1 <- dmy_hms("01/09/1993 20:00:00")
data2 <- dmy_hms("24-06-2018 17:00:00")
data2 - data1
?difftime
difftime(time1 = data2, time = data1, units = "days")
class(difftime(time1 = data2, time = data1, units = "days"))
as.numeric(difftime(time1 = data2, time = data1, units = "days"))
as.numeric(difftime(time1 = data2, time = data1, units = "days"))/365
difftime(time1 = data2, time = data1, units = "days")/365
as.numeric(difftime(time1 = data2, time = data1, units = "days"))/365
datas_brasil
floor_date(x, "week")
datas_brasil
floor_date(datas_brasil, "week")
floor_date(today(), "week")
floor_date(datas_brasil, "month")
ceiling_date(datas_brasil, "month")
?ceiling_date
floor_date("2020-11-25", "week")
floor_date(as_date("2020-11-25"), "week")
ceiling_date(datas_brasil, "month")
ceiling_date(datas_brasil, "month", change_on_boundary = FALSE)
ceiling_date(datas_brasil, "month", change_on_boundary = TRUE)
ceiling_date(datas_brasil, "month")
ceiling_date(datas_brasil, "month") - ddays(1)
# desafio 1
# para uma data de nascimento, retorne todos os aniversarios ate hoje
niver = as_date("1993-09-01")
seq.Date(from = niver,
by = "1 year",
to = today())
# desafio 1
# para uma data de nascimento, conte quantos aniversarios caíram numa segunda
niver = as_date("1993-09-01")
# desafio 1
# para uma data de nascimento, conte quantos aniversarios caíram numa segunda
niver <- as_date("1993-09-01")
seq.Date(from = niver,
by = "1 year",
to = today())
vetor_datas_niver <- seq.Date(from = niver,
by = "1 year",
to = today())
vetor_datas_niver
wday(vetor_datas_niver)
x <- wday(vetor_datas_niver)
x[x == 2]
x == 2
sum(x == 2)
mean(x == 2)
proporcao_nivers_na_segunda <- function(dta){
vetor_datas_niver <- seq.Date(from = dta,
by = "1 year",
to = today())
x <- wday(vetor_datas_niver)
mean(x == 2)
}
proporcao_nivers_na_segunda <- function(dta){
dta = as_date(dta)
vetor_datas_niver <- seq.Date(from = dta,
by = "1 year",
to = today())
x <- wday(vetor_datas_niver)
mean(x == 2)
}
proporcao_nivers_na_segunda("1993-09-01")
proporcao_nivers_na_segunda("1994-03-27")
proporcao_nivers_no_dia_semana <- function(dta, dia_semana){
dta = as_date(dta)
vetor_datas_niver <- seq.Date(from = dta,
by = "1 year",
to = today())
x <- wday(vetor_datas_niver)
mean(x == dia_semana)
}
proporcao_nivers_no_dia_semana("1993-09-01", 1)
proporcao_nivers_no_dia_semana("1993-09-01", 3)
proporcao_nivers_no_dia_semana("1993-09-01", 7)
proporcao_nivers_no_dia_semana <- function(dta, dia_semana){
dta = as_date(dta)
vetor_datas_niver <- seq.Date(from = dta,
by = "1 year",
to = today())
x <- wday(vetor_datas_niver)
mean(x == dia_semana)
}
retornas_datas <- function(dta, dia_semana = 2){
dta = as_date(dta)
vetor_datas_mes <- seq.Date(from = floor_date(dta, "month"),
to = ceiling_date(dta, "month") - ddays(1),
by = "1 day"
)
vetor_datas_mes
}
retornar_datas("1993-09-01", 4)
retornar_datas <- function(dta, dia_semana = 2){
dta = as_date(dta)
vetor_datas_mes <- seq.Date(from = floor_date(dta, "month"),
to = ceiling_date(dta, "month") - ddays(1),
by = "1 day"
)
vetor_datas_mes
}
retornar_datas("1993-09-01", 4)
retornar_datas(today(), 4)
retornar_datas("2020-02-15", 4)
retornar_datas <- function(dta, dia_semana = 2){
dta = as_date(dta)
vetor_datas_mes <- seq.Date(from = floor_date(dta, "month"),
to = ceiling_date(dta, "month") - ddays(1),
by = "1 day"
)
vetor_datas_mes[wday(vetor_datas_mes) == dia_semana]
}
retornar_datas("1993-09-01", 4)
retornar_datas("1993-09-01", 2)
retornar_datas("1993-09-01", 7)
